import numpy as np
from pygasflow.atd.newton.sphere import sphere_solver
from pytest import raises


alpha = np.deg2rad([1, 2, 4, 6, 8, 10, 12, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60, 65, 70, 75, 80, 85])

def pprint(arr):
    s = ["{:.8f}".format(t) for t in arr]
    print("[%s]" % ", ".join(s))


# def test_number_elements_returned_1():
#     sigma_cut = np.deg2rad(40)
#     beta = np.deg2rad(0)
#     res1 = sphere_solver(1, alpha, beta, to_dict=True)
#     res2 = sphere_solver(1, alpha, beta, to_dict=False)
#     assert len(res1) == len(res2) == 10


# def test_number_elements_returned_2():
#     # input array -> output array
#     # input float -> output float
#     sigma_cut = np.deg2rad(40)
#     beta = np.deg2rad(0)
#     res1 = sphere_solver(1, alpha, beta, to_dict=True)
#     res2 = sphere_solver(1, alpha[0], beta, to_dict=True)
#     assert all([isinstance(t, np.ndarray) for t in res1.values()])
#     assert all([isinstance(t, (float, int)) for t in res2.values()])


# def test_raise_errors():
#     sigma_cut = np.deg2rad(-40)
#     beta = np.deg2rad(0)
#     raises(ValueError, lambda: sphere_solver(1, alpha, beta, sigma_cut=sigma_cut, to_dict=True))


# ###############################################################################
# ################################# FULL SPHERE #################################
# ###############################################################################


# def test_phi1_0_phi2_360_beta_0_sigma_cut_5():
#     sigma_cut = np.deg2rad(5)
#     beta = np.deg2rad(0)
#     res = sphere_solver(1, alpha, beta, sigma_cut=sigma_cut, to_dict=True)

#     assert np.allclose(res["CN"], np.array(
#         [0.00000101, 0.00000201, 0.00000402, 0.00000600, 0.00000795,
#         0.00000987, 0.00001173, 0.00001443, 0.00001854, 0.00002210,
#         0.00002499, 0.00002711, 0.00002841, 0.00002885, 0.00002841,
#         0.00002711, 0.00002499, 0.00002210, 0.00001854, 0.00001443,
#         0.00000987, 0.00000501]
#     ))
#     assert np.allclose(res["CA"], np.array(
#         [0.01512994, 0.01511615, 0.01506104, 0.01496950, 0.01484196,
#         0.01467905, 0.01448157, 0.01412266, 0.01336752, 0.01243658,
#         0.01135812, 0.01016492, 0.00889324, 0.00758170, 0.00627016,
#         0.00499847, 0.00380527, 0.00272682, 0.00179588, 0.00104074,
#         0.00048434, 0.00014360]
#     ))
#     assert np.allclose(res["CY"], np.zeros_like(res["CY"]))
#     assert np.allclose(res["L/D"], np.array(
#         [-0.01738850, -0.03478747, -0.06965892, -0.10469912, -0.13999450,
#         -0.17563395, -0.21170979, -0.26685473, -0.36239994, -0.46414596,
#         -0.57442096, -0.69624023, -0.83366994, -0.99241827, -1.18084540,
#         -1.41178855, -1.70608227, -2.09990320, -2.66163724, -3.53531400,
#         -5.06562456, -8.14650721]
#     ))
#     assert np.allclose(res["Cl"], 0)
#     assert np.allclose(res["Cm"], 0)
#     assert np.allclose(res["Cn"], 0)


# def test_phi1_0_phi2_360_beta_0_sigma_cut_40():
#     sigma_cut = np.deg2rad(40)
#     beta = np.deg2rad(0)
#     res = sphere_solver(1, alpha, beta, sigma_cut=sigma_cut, to_dict=True)

#     assert np.allclose(res["CN"], np.array(
#         [0.00297892, 0.00595421, 0.01187942, 0.01774675, 0.02352762,
#         0.02919387, 0.03471789, 0.04267858, 0.05486653, 0.06538738,
#         0.07392147, 0.08020950, 0.08406040, 0.08535717, 0.08406040,
#         0.08023862, 0.07422416, 0.06653606, 0.05774856, 0.04843386,
#         0.03912542, 0.03029092]
#     ))
#     assert np.allclose(res["CA"], np.array(
#         [0.65546379, 0.65494290, 0.65286252, 0.64940649, 0.64459164,
#         0.63844143, 0.63098583, 0.61743595, 0.58892736, 0.55378189,
#         0.51306741, 0.46802101, 0.42001140, 0.37049733, 0.32098326,
#         0.27293685, 0.22752219, 0.18558504, 0.14774164, 0.11440254,
#         0.08578453, 0.06192166]
#     ))
#     assert np.allclose(res["CY"], np.zeros_like(res["CY"]))
#     assert np.allclose(res["L/D"], np.array(
#         [-0.01290929, -0.02582137, -0.05166517, -0.07755383, -0.10350981,
#         -0.12955561, -0.15571380, -0.19521135, -0.26192519, -0.33006062,
#         -0.39999952, -0.47216663, -0.54708583, -0.62550696, -0.70868732,
#         -0.79879239, -0.89826404, -1.00968791, -1.13630270, -1.28242985,
#         -1.45407210, -1.65987850]
#     ))
#     assert np.allclose(res["Cl"], 0)
#     assert np.allclose(res["Cm"], 0)
#     assert np.allclose(res["Cn"], 0)


# def test_phi1_0_phi2_360_beta_0_sigma_cut_90():
#     sigma_cut = np.deg2rad(90)
#     beta = np.deg2rad(0)
#     res = sphere_solver(1, alpha, beta, sigma_cut=sigma_cut, to_dict=True)

#     assert np.allclose(res["CN"], np.array(
#         [0.01745108, 0.03488887, 0.06967151, 0.10424215, 0.13849589,
#         0.17232912, 0.20564001, 0.25440952, 0.33170697, 0.40282024,
#         0.46650635, 0.52171137, 0.56759574, 0.60355339, 0.62922416,
#         0.64449918, 0.64951905, 0.64466500, 0.63054321, 0.60796291,
#         0.57790891, 0.54150939]
#     ))
#     assert np.allclose(res["CA"], np.array(
#         [0.99984770, 0.99939092, 0.99756553, 0.99452940, 0.99029175,
#         0.98486545, 0.97826698, 0.96621609, 0.94060187, 0.90850234,
#         0.87051270, 0.82732854, 0.77972824, 0.72855339, 0.67468778,
#         0.61903570, 0.56250000, 0.50596068, 0.45025452, 0.39615635,
#         0.34436251, 0.29547690]
#     ))
#     assert np.allclose(res["CY"], np.zeros_like(res["CY"]))
#     assert np.allclose(res["L/D"], np.array(
#         [-0.00000133, -0.00001063, -0.00008486, -0.00028553, -0.00067396,
#         -0.00130926, -0.00224766, -0.00433813, -0.01002900, -0.01899169,
#         -0.03165713, -0.04828830, -0.06900804, -0.09383632, -0.12273014,
#         -0.15562142, -0.19245009, -0.23319196, -0.27788182, -0.32663357,
#         -0.37965933, -0.43728999]
#     ))
#     assert np.allclose(res["Cl"], 0)
#     assert np.allclose(res["Cm"], 0)
#     assert np.allclose(res["Cn"], 0)


# def test_phi1_0_phi2_360_beta_0_sigma_cut_180():
#     sigma_cut = np.deg2rad(180)
#     beta = np.deg2rad(0)
#     res = sphere_solver(1, alpha, beta, sigma_cut=sigma_cut, to_dict=True)

#     assert np.allclose(res["CN"], np.array(
#         [0.01745241, 0.03489950, 0.06975647, 0.10452846, 0.13917310,
#         0.17364818, 0.20791169, 0.25881905, 0.34202014, 0.42261826,
#         0.50000000, 0.57357644, 0.64278761, 0.70710678, 0.76604444,
#         0.81915204, 0.86602540, 0.90630779, 0.93969262, 0.96592583,
#         0.98480775, 0.99619470]
#     ))
#     assert np.allclose(res["CA"], np.array(
#         [0.99984770, 0.99939083, 0.99756405, 0.99452190, 0.99026807,
#         0.98480775, 0.97814760, 0.96592583, 0.93969262, 0.90630779,
#         0.86602540, 0.81915204, 0.76604444, 0.70710678, 0.64278761,
#         0.57357644, 0.50000000, 0.42261826, 0.34202014, 0.25881905,
#         0.17364818, 0.08715574]
#     ))
#     assert np.allclose(res["CY"], np.zeros_like(res["CY"]))
#     assert np.allclose(res["L/D"], np.zeros_like(res["CY"]))
#     assert np.allclose(res["Cl"], 0)
#     assert np.allclose(res["Cm"], 0)
#     assert np.allclose(res["Cn"], 0)


# ###############################################################################
# ################################# SPHERE CAPS #################################
# ############################## PHI_1=90, PHI_2=270 ############################
# ###############################################################################


# def test_phi1_90_phi2_270_beta_0_sigma_cut_40():
#     sigma_cut = np.deg2rad(40)
#     beta = np.deg2rad(0)
#     res = sphere_solver(1, alpha, beta, phi_1=np.pi/2, phi_2=1.5*np.pi, sigma_cut=sigma_cut, to_dict=True)

#     assert np.allclose(res["CN"], np.array(
#         [0.19793824, 0.20077618, 0.20615280, 0.21110878, 0.21561999,
#         0.21966444, 0.22322244, 0.22761007, 0.23228038, 0.23353347,
#         0.23133126, 0.22574068, 0.21693158, 0.20517162, 0.19081813,
#         0.17430723, 0.15614059, 0.13687021, 0.11708159, 0.09737601,
#         0.07835221, 0.06058822]
#     ))
#     assert np.allclose(res["CA"], np.array(
#         [0.66226937, 0.66854577, 0.68000199, 0.68995034, 0.69834234,
#         0.70513711, 0.71030156, 0.71493851, 0.71427424, 0.70316448,
#         0.68194680, 0.65126588, 0.61205396, 0.56550245, 0.51302582,
#         0.45621853, 0.39680664, 0.33659536, 0.27741417, 0.22106127,
#         0.16924890, 0.12355137]
#     ))
#     assert np.allclose(res["CY"], np.zeros_like(res["CY"]))
#     assert np.allclose(res["L/D"],np.array(
#         [0.27996313, 0.26264259, 0.22839632, 0.19461387, 0.16122289,
#         0.12815379, 0.09533920, 0.04645140, -0.03466898, -0.11619483,
#         -0.19912902, -0.28453197, -0.37356719, -0.46755281, -0.56802122,
#         -0.67678782, -0.79602638, -0.92834064, -1.07680672, -1.24494250,
#         -1.43659859, -1.65622729]
#     ))


# def test_phi1_90_phi2_270_beta_0_sigma_cut_90():
#     sigma_cut = np.deg2rad(90)
#     beta = np.deg2rad(0)
#     res = sphere_solver(1, alpha, beta, phi_1=np.pi/2, phi_2=1.5*np.pi, sigma_cut=sigma_cut, to_dict=True)

#     assert np.allclose(res["CN"], np.array(
#         [0.51760204, 0.53548722, 0.57201953, 0.60941895, 0.64750325,
#         0.68608692, 0.72498196, 0.78349365, 0.87988269, 0.97232532,
#         1.05801270, 1.13434127, 1.19899183, 1.25000000, 1.28581592,
#         1.30535135, 1.30801270, 1.29371912, 1.26290492, 1.21650635,
#         1.15593323, 1.08302603]
#     ))
#     assert np.allclose(res["CA"], np.array(
#         [1.01729746, 1.03426925, 1.06715357, 1.09849275, 1.12813410,
#         1.15593323, 1.18175469, 1.21650635, 1.26290492, 1.29371912,
#         1.30801270, 1.30535135, 1.28581592, 1.25000000, 1.19899183,
#         1.13434127, 1.05801270, 0.97232532, 0.87988269, 0.78349365,
#         0.68608692, 0.59062215]
#     ))
#     assert np.allclose(res["CY"], np.zeros_like(res["CY"]))
#     assert np.allclose(res["L/D"],np.array(
#         [0.48702071, 0.47424929, 0.44925756, 0.42489761, 0.40106670,
#         0.37768138, 0.35467358, 0.32075015, 0.26543366, 0.21123551,
#         0.15781857, 0.10493510, 0.05238654, 0.00000000, -0.05238654,
#         -0.10493510, -0.15781857, -0.21123551, -0.26543366, -0.32075015,
#         -0.37768138, -0.43700554]
#     ))


# def test_phi1_90_phi2_270_beta_0_sigma_cut_180():
#     # NOTE: wrong results on some values of CA, from the third decimal figure.
#     # Hence, L/D is wrong with same order of error.
#     # Pages 48, 56, 83
#     sigma_cut = np.deg2rad(180)
#     beta = np.deg2rad(0)
#     res = sphere_solver(1, alpha, beta, phi_1=np.pi/2, phi_2=1.5*np.pi, sigma_cut=sigma_cut, to_dict=True)
#     # pprint(res["CA"])

#     assert np.allclose(res["CN"], np.array(
#         [0.51760470, 0.53550848, 0.57218946, 0.60999156, 0.64885768,
#         0.68872502, 0.72952533, 0.79231269, 0.90050903, 1.01192136,
#         1.12500000, 1.23807140, 1.34937557, 1.45710678, 1.55945649,
#         1.65465708, 1.74102540, 1.81700469, 1.88120373, 1.93243218,
#         1.96973091, 1.99239664]
#     ))
#     assert np.allclose(res["CA"], np.array(
#         [1.01729744, 1.03426906, 1.06715060, 1.09847774, 1.12808675,
#         1.15581782, 1.18151592, 1.21592583, 1.26108643, 1.28933001,
#         1.29903811, 1.28899835, 1.25844832, 1.20710678, 1.13519149,
#         1.04342275, 0.93301270, 0.80564048, 0.66341395, 0.50881905,
#         0.34465825, 0.17397983]
#     ))
#     assert np.allclose(res["CY"], np.zeros_like(res["CY"]))
#     assert np.allclose(res["L/D"],np.array(
#         [0.48702328, 0.47426924, 0.44940761, 0.42537499, 0.40213596,
#         0.37965933, 0.35791789, 0.32663357, 0.27788182, 0.23319196,
#         0.19245009, 0.15562142, 0.12273014, 0.09383632, 0.06900804,
#         0.04828830, 0.03165713, 0.01899169, 0.01002900, 0.00433813,
#         0.00130926, 0.00016551]
#     ))


# def test_phi1_90_phi2_270_beta_15_sigma_cut_40():
#     sigma_cut = np.deg2rad(40)
#     beta = np.deg2rad(15)
#     res = sphere_solver(1, alpha, beta, phi_1=np.pi/2, phi_2=1.5*np.pi, sigma_cut=sigma_cut, to_dict=True)

#     assert np.allclose(res["CN"], np.array(
#         [0.18617351, 0.18882134, 0.19383779, 0.19846179, 0.20267080,
#         0.20644433, 0.20976398, 0.21385770, 0.21821516, 0.21938431,
#         0.21732962, 0.21211353, 0.20389453, 0.19292234, 0.17953035,
#         0.16412547, 0.14717577, 0.12919626, 0.11073322, 0.09234767,
#         0.07459821, 0.05802324]
#     ))
#     assert np.allclose(res["CA"], np.array(
#         [0.62362358, 0.62947954, 0.64016834, 0.64945027, 0.65728012,
#         0.66361973, 0.66843822, 0.67276456, 0.67214479, 0.66177924,
#         0.64198287, 0.61335719, 0.57677196, 0.53333882, 0.48437745,
#         0.43137552, 0.37594348, 0.31976559, 0.26454879, 0.21197082,
#         0.16362864, 0.12095592]
#     ))
#     assert np.allclose(res["CY"], np.array(
#         [-0.04286678, -0.04304192, -0.04335282, -0.04361090, -0.04381585,
#         -0.04396741, -0.04406541, -0.04411172, -0.04392031, -0.04339464,
#         -0.04253871, -0.04135904, -0.03986460, -0.03806676, -0.03597922,
#         -0.03361785, -0.03100062, -0.02814747, -0.02508010, -0.02182185,
#         -0.01839799, -0.01485953]
#     ))


# def test_phi1_90_phi2_270_beta_15_sigma_cut_90():
#     sigma_cut = np.deg2rad(90)
#     beta = np.deg2rad(15)
#     res = sphere_solver(1, alpha, beta, phi_1=np.pi/2, phi_2=1.5*np.pi, sigma_cut=sigma_cut, to_dict=True)

#     assert np.allclose(res["CN"], np.array(
#         [0.51480945, 0.53171997, 0.56615270, 0.60129459, 0.63700539,
#         0.67313315, 0.70951723, 0.76420828, 0.85423823, 0.94054231,
#         1.02052160, 1.09175687, 1.15208910, 1.19968804, 1.23310893,
#         1.25133706, 1.25381868, 1.24047796, 1.21171893, 1.16841261,
#         1.11186878, 1.04379158]
#     ))
#     assert np.allclose(res["CA"], np.array(
#         [0.98238434, 0.99824449, 1.02896629, 1.05823614, 1.08591453,
#         1.11186878, 1.13597395, 1.16841261, 1.21171893, 1.24047796,
#         1.25381868, 1.25133706, 1.23310893, 1.19968804, 1.15208910,
#         1.09175687, 1.02052160, 0.94054231, 0.85423823, 0.76420828,
#         0.67313315, 0.58364346]
#     ))
#     assert np.allclose(res["CY"], np.array(
#         [-0.25838945, -0.26232684, -0.27005655, -0.27756521, -0.28482246,
#         -0.29180171, -0.29848007, -0.30789170, -0.32183656, -0.33345055,
#         -0.34260349, -0.34920320, -0.35318725, -0.35451926, -0.35318725,
#         -0.34920320, -0.34260349, -0.33345055, -0.32183656, -0.30789170,
#         -0.29180171, -0.27384049]
#     ))


# def test_phi1_90_phi2_270_beta_15_sigma_cut_180():
#     # NOTE: wrong results. Pages 49, 58, 67
#     sigma_cut = np.deg2rad(180)
#     beta = np.deg2rad(15)
#     res = sphere_solver(1, alpha, beta, phi_1=np.pi/2, phi_2=1.5*np.pi, sigma_cut=sigma_cut, to_dict=True)
#     # pprint(res["CN"])
#     # pprint(res["CA"])
#     # pprint(res["CY"])

#     assert np.allclose(res["CN"], np.array(
#         [0.51278607, 0.52587153, 0.55299886, 0.58149129, 0.61144359,
#         0.64293193, 0.67601036, 0.72866525, 0.82438539, 0.92909758,
#         1.04073660, 1.15639198, 1.27266282, 1.38606255, 1.49338805,
#         1.59198301, 1.67985686, 1.75565922, 1.81854620, 1.86799799,
#         1.90365314, 1.92521169]
#     ))
#     assert np.allclose(res["CA"], np.array(
#         [0.96491220, 0.98043297, 1.00986960, 1.03707556, 1.06196781,
#         1.08449124, 1.10461576, 1.13029082, 1.16118706, 1.17761377,
#         1.17996537, 1.16824909, 1.14192191, 1.09995221, 1.04108502,
#         0.96423707, 0.86891443, 0.75554181, 0.62561792, 0.48165925,
#         0.32695072, 0.16517222]
#     ))
#     assert np.allclose(res["CY"], np.array(
#         [-0.19848787, -0.20299723, -0.21229924, -0.22196155, -0.23195835,
#         -0.24225827, -0.25282485, -0.26908406, -0.29688609, -0.32488450,
#         -0.35227987, -0.37833396, -0.40243677, -0.42415057, -0.44322564,
#         -0.45958772, -0.47330216, -0.48452316, -0.49343919, -0.50022531,
#         -0.50501076, -0.50786739]
#     ))


###############################################################################
################################# SPHERE CAPS #################################
############################# PHI_1=105, PHI_2=255 ############################
###############################################################################


def test_phi1_105_phi2_255_beta_0_sigma_cut_40():
    phi_1 = np.deg2rad(105)
    phi_2 = np.deg2rad(255)
    sigma_cut = np.deg2rad(40)
    beta = np.deg2rad(0)
    res = sphere_solver(1, alpha, beta, phi_1=phi_1, phi_2=phi_2, sigma_cut=sigma_cut, to_dict=True)

    assert np.allclose(res["CN"], np.array(
        [0.22952787, 0.23291378, 0.23934106, 0.24528311, 0.25071100,
        0.25559826, 0.25992110, 0.26530176, 0.27119026, 0.27308485,
        0.27092796, 0.26478512, 0.25484299, 0.24140365, 0.22487544,
        0.20576057, 0.18463984, 0.16215498, 0.13898919, 0.11584635,
        0.09342964, 0.07242018]
    ))
    assert np.allclose(res["CA"], np.array(
        [0.66335718, 0.67072999, 0.68439950, 0.69657943, 0.70721042,
        0.71624070, 0.72362625, 0.73154427, 0.73612528, 0.72984454,
        0.71289287, 0.68578536, 0.64934564, 0.60468092, 0.55314832,
        0.49631362, 0.43590372, 0.37375415, 0.31175328, 0.25178499,
        0.19567137, 0.14511742]
    ))
    assert np.allclose(res["CY"], np.zeros_like(res["CY"]))
    assert np.allclose(res["L/D"],np.array(
        [0.32658199, 0.30859129, 0.27310425, 0.23820496, 0.20381165,
        0.16984642, 0.13623457, 0.08632236, 0.00390806, -0.07845116,
        -0.16180697, -0.24725603, -0.33599162, -0.42936284, -0.52894599,
        -0.63663341, -0.75474465, -0.88616266, -1.03448986, -1.20419901,
        -1.40072466, -1.63049205]
    ))


def test_phi1_105_phi2_255_beta_0_sigma_cut_90():
    phi_1 = np.deg2rad(105)
    phi_2 = np.deg2rad(255)
    sigma_cut = np.deg2rad(90)
    beta = np.deg2rad(0)
    res = sphere_solver(1, alpha, beta, phi_1=phi_1, phi_2=phi_2, sigma_cut=sigma_cut, to_dict=True)

    assert np.allclose(res["CN"], np.array(
        [0.60052625, 0.62184815, 0.66544111, 0.71012197, 0.75567307,
        0.80187247, 0.84849511, 0.91872547, 1.03466752, 1.14617578,
        1.24986212, 1.34257609, 1.42150062, 1.48423764, 1.52888090,
        1.55407394, 1.55905130, 1.54366172, 1.50837282, 1.45425684,
        1.38295805, 1.29664284]
    ))
    assert np.allclose(res["CA"], np.array(
        [1.02010299, 1.03993507, 1.07869022, 1.11607664, 1.15191219,
        1.18602227, 1.21824072, 1.26268091, 1.32521276, 1.37171780,
        1.40078302, 1.41152528, 1.40361818, 1.37730198, 1.33337627,
        1.27317573, 1.19852951, 1.11170570, 1.01534239, 0.91236755,
        0.80591000, 0.69920441]
    ))
    assert np.allclose(res["CY"], np.zeros_like(res["CY"]))
    assert np.allclose(res["L/D"],np.array(
        [0.56542659, 0.55153069, 0.52435122, 0.49786754, 0.47196188,
        0.44654097, 0.42153054, 0.38465727, 0.32455589, 0.26573096,
        0.20784088, 0.15062696, 0.09387045, 0.03736997, -0.01907035,
        -0.07564785, -0.13256678, -0.19004524, -0.24832676, -0.30770172,
        -0.36854717, -0.43140099]
    ))


def test_phi1_105_phi2_255_beta_0_sigma_cut_180():
    # NOTE: wrong results on some values of CA, from the third decimal figure.
    # Hence, L/D is wrong with same order of error.
    # Pages 48, 59, 85
    phi_1 = np.deg2rad(105)
    phi_2 = np.deg2rad(255)
    sigma_cut = np.deg2rad(180)
    beta = np.deg2rad(0)
    res = sphere_solver(1, alpha, beta, phi_1=phi_1, phi_2=phi_2, sigma_cut=sigma_cut, to_dict=True)
    # pprint(res["CA"])

    assert np.allclose(res["CN"], np.array(
        [0.60052944, 0.62187366, 0.66564493, 0.71080883, 0.75729771,
        0.80503691, 0.85394493, 0.92930398, 1.05940882, 1.19367089,
        1.33021204, 1.46699677, 1.60187787, 1.73264622, 1.85708332,
        1.97301488, 2.07836404, 2.17120221, 2.24979574, 2.31264594,
        2.35851985, 2.38647127]
    ))
    assert np.allclose(res["CA"], np.array(
        [1.02010297, 1.03993485, 1.07868666, 1.11605864, 1.15185538,
        1.18588385, 1.21795432, 1.26198458, 1.32303151, 1.36645321,
        1.39001851, 1.39191134, 1.37079435, 1.32585959, 1.25686442,
        1.16415193, 1.04865530, 0.91188694, 0.75591499, 0.58333425,
        0.39725103, 0.20133140]
    ))
    assert np.allclose(res["CY"], np.zeros_like(res["CY"]))
    assert np.allclose(res["L/D"],np.array(
        [0.56542967, 0.55155437, 0.52452760, 0.49842330, 0.47319504,
        0.44880142, 0.42520560, 0.39123747, 0.33820459, 0.28937219,
        0.24452288, 0.20353322, 0.16635601, 0.13300175, 0.10351742,
        0.07796100, 0.05637098, 0.03873071, 0.02492892, 0.01471774,
        0.00766693, 0.00310213]
    ))


def test_phi1_105_phi2_255_beta_15_sigma_cut_40():
    # NOTE: wrong CY values. Page 70
    phi_1 = np.deg2rad(105)
    phi_2 = np.deg2rad(255)
    sigma_cut = np.deg2rad(40)
    beta = np.deg2rad(15)
    res = sphere_solver(1, alpha, beta, phi_1=phi_1, phi_2=phi_2, sigma_cut=sigma_cut, to_dict=True)
    # pprint(res["CN"])
    # pprint(res["CA"])
    # pprint(res["CY"])

    assert np.allclose(res["CN"], np.array(
        [0.21576879, 0.21892788, 0.22492462, 0.23046863, 0.23553292,
        0.24009280, 0.24412606, 0.24914628, 0.25464033, 0.25640801,
        0.25439560, 0.24866426, 0.23938812, 0.22684904, 0.21142802,
        0.19359360, 0.17388769, 0.15290903, 0.13129505, 0.10970249,
        0.08878741, 0.06918532]
    ))
    assert np.allclose(res["CA"], np.array(
        [0.62354649, 0.63042542, 0.64317925, 0.65454327, 0.66446212,
        0.67288748, 0.67977830, 0.68716591, 0.69144006, 0.68558004,
        0.66976392, 0.64447227, 0.61047355, 0.56880080, 0.52072022,
        0.46769273, 0.41132952, 0.35334318, 0.29549559, 0.23954441,
        0.18718969, 0.14002221]
    ))
    assert np.allclose(res["CY"], np.array(
        [-0.03473287, -0.03492760, -0.03528506, -0.03559954, -0.03587065,
        -0.03609805, -0.03628147, -0.03647367, -0.03657170, -0.03639140,
        -0.03593414, -0.03520340, -0.03420474, -0.03294576, -0.03143605,
        -0.02968708, -0.02771218, -0.02552638, -0.02314630, -0.02059007,
        -0.01787713, -0.01502813]
    ))


def test_phi1_105_phi2_255_beta_15_sigma_cut_90():
    # NOTE: wrong CY values. Page 70
    phi_1 = np.deg2rad(105)
    phi_2 = np.deg2rad(255)
    sigma_cut = np.deg2rad(90)
    beta = np.deg2rad(15)
    res = sphere_solver(1, alpha, beta, phi_1=phi_1, phi_2=phi_2, sigma_cut=sigma_cut, to_dict=True)
    # pprint(res["CY"])

    assert np.allclose(res["CN"], np.array(
        [0.59486504, 0.61501745, 0.65608970, 0.69805836, 0.74075596,
        0.78400078, 0.82760045, 0.89322687, 1.00149382, 1.10557629,
        1.20233863, 1.28885276, 1.36249572, 1.42103274, 1.46268668,
        1.48619264, 1.49083678, 1.47647818, 1.44355322, 1.39306232,
        1.32653964, 1.24600646]
    ))
    assert np.allclose(res["CA"], np.array(
        [0.97869531, 0.99722470, 1.03342377, 1.06833427, 1.10178970,
        1.13362958, 1.16370051, 1.20517474, 1.26352789, 1.30692257,
        1.33404314, 1.34406693, 1.33669003, 1.31213692, 1.27115378,
        1.21498594, 1.14534008, 1.06433237, 0.97442418, 0.87834734,
        0.77902110, 0.67946343]
    ))
    assert np.allclose(res["CY"], np.array(
        [-0.20963237, -0.21393802, -0.22246021, -0.23083157, -0.23901689,
        -0.24698526, -0.25471011, -0.26579218, -0.28276809, -0.29769258,
        -0.31040528, -0.32078484, -0.32873894, -0.33419975, -0.33712162,
        -0.33748009, -0.33527122, -0.33051123, -0.32323603, -0.31350088,
        -0.30137980, -0.28696505]
    ))


def test_phi1_105_phi2_255_beta_15_sigma_cut_180():
    # NOTE: wrong values. Page 50, 61, 70
    phi_1 = np.deg2rad(105)
    phi_2 = np.deg2rad(255)
    sigma_cut = np.deg2rad(180)
    beta = np.deg2rad(15)
    res = sphere_solver(1, alpha, beta, phi_1=phi_1, phi_2=phi_2, sigma_cut=sigma_cut, to_dict=True)
    # pprint(res["CN"])
    # pprint(res["CA"])
    # pprint(res["CY"])

    assert np.allclose(res["CN"], np.array(
        [0.59213704, 0.60768908, 0.63997381, 0.67393946, 0.70970224,
        0.74735354, 0.78695851, 0.85009626, 0.96510616, 1.09117927,
        1.22581829, 1.36550641, 1.50611735, 1.64343456, 1.77356213,
        1.89325866, 2.00007676, 2.09233450, 2.16895600, 2.22925577,
        2.27274522, 2.29902850]
    ))
    assert np.allclose(res["CA"], np.array(
        [0.95788080, 0.97600818, 1.01067672, 1.04312266, 1.07324850,
        1.10098656, 1.12629743, 1.15968365, 1.20320209, 1.23187121,
        1.24589867, 1.24496554, 1.22802334, 1.19341828, 1.13918805,
        1.06357317, 0.96553362, 0.84517036, 0.70394176, 0.54463559,
        0.37112087, 0.18796135]
    ))
    assert np.allclose(res["CY"], np.array(
        [-0.13545232, -0.14038561, -0.15067687, -0.16149476, -0.17282686,
        -0.18463020, -0.19686142, -0.21590211, -0.24901989, -0.28304004,
        -0.31698677, -0.34994950, -0.38115447, -0.41003114, -0.43621309,
        -0.45952714, -0.47994287, -0.49750456, -0.51225533, -0.52416780,
        -0.53309417, -0.53874872]
    ))


###############################################################################
################################# SPHERE CAPS #################################
############################# PHI_1=120, PHI_2=240 ############################
###############################################################################


# def test_phi1_120_phi2_240_beta_0_sigma_cut_40():
#     phi_1 = np.deg2rad(120)
#     phi_2 = np.deg2rad(240)
#     sigma_cut = np.deg2rad(40)
#     beta = np.deg2rad(0)
#     res = sphere_solver(1, alpha, beta, phi_1=phi_1, phi_2=phi_2, sigma_cut=sigma_cut, to_dict=True)

#     assert np.allclose(res["CN"], np.array(
#         [0.25747249, 0.26150624, 0.26919530, 0.27634879, 0.28293187,
#         0.28891246, 0.29426144, 0.30104447, 0.30886863, 0.31214720,
#         0.31078057, 0.30481027, 0.29441769, 0.27991861, 0.26175358,
#         0.24047454, 0.21672803, 0.19123558, 0.16477177, 0.13814068,
#         0.11215150, 0.08759388]
#     ))
#     assert np.allclose(res["CA"], np.array(
#         [0.66431525, 0.67265654, 0.68828947, 0.70246013, 0.71509948,
#         0.72614593, 0.73554568, 0.74645980, 0.75588645, 0.75413946,
#         0.74127190, 0.71767475, 0.68406500, 0.64146387, 0.59116576,
#         0.53469896, 0.47377919, 0.41025746, 0.34606385, 0.28314884,
#         0.22342409, 0.16870428]
#     ))
#     assert np.allclose(res["CY"], np.zeros_like(res["CY"]))
#     assert np.allclose(res["L/D"], np.array(
#         [0.36763360, 0.34910613, 0.31263075, 0.27684992, 0.24167458,
#         0.20702049, 0.17280742, 0.12214749, 0.03886704, -0.04391906,
#         -0.12728664, -0.21234013, -0.30026610, -0.39239432, -0.49027204,
#         -0.59575850, -0.71114909, -0.83934060, -0.98405083, -1.15010486,
#         -1.34379758, -1.57337727]
#     ))


# def test_phi1_120_phi2_240_beta_0_sigma_cut_90():
#     phi_1 = np.deg2rad(120)
#     phi_2 = np.deg2rad(240)
#     sigma_cut = np.deg2rad(90)
#     beta = np.deg2rad(0)
#     res = sphere_solver(1, alpha, beta, phi_1=phi_1, phi_2=phi_2, sigma_cut=sigma_cut, to_dict=True)

#     assert np.allclose(res["CN"], np.array(
#         [0.67443151, 0.69980820, 0.75183008, 0.80533126, 0.86005109,
#         0.91572296, 0.97207567, 1.05728013, 1.19878225, 1.33592985,
#         1.46455577, 1.58075178, 1.68098733, 1.76221680, 1.82197208,
#         1.85843753, 1.87050518, 1.85780835, 1.82073282, 1.76040513,
#         1.67865829, 1.57797615]
#     ))
#     assert np.allclose(res["CA"], np.array(
#         [1.02257857, 1.04495099, 1.08896863, 1.13183848, 1.17335168,
#         1.21330598, 1.25150673, 1.30511539, 1.38319887, 1.44518390,
#         1.48918708, 1.51387142, 1.51848688, 1.50289322, 1.46756426,
#         1.41357344, 1.34256125, 1.25668536, 1.15855506, 1.05115200,
#         0.93773955, 0.82176371]
#     ))
#     assert np.allclose(res["CY"], np.zeros_like(res["CY"]))
#     assert np.allclose(res["L/D"], np.array(
#         [0.63477722, 0.62027738, 0.59190301, 0.56422547, 0.53711512,
#         0.51047305, 0.48422347, 0.44546074, 0.38215522, 0.32010894,
#         0.25903139, 0.19869596, 0.13889559, 0.07942262, 0.02006018,
#         -0.03942146, -0.09926719, -0.15974034, -0.22112905, -0.28375892,
#         -0.34801754, -0.41440126]
#     ))


# def test_phi1_120_phi2_240_beta_0_sigma_cut_180():
#     # NOTE: wrong results on some values of CA, from the third decimal figure
#     # Hence, L/D is wrong with same order of error.
#     # Pages 60, 85
#     phi_1 = np.deg2rad(120)
#     phi_2 = np.deg2rad(240)
#     sigma_cut = np.deg2rad(180)
#     beta = np.deg2rad(0)
#     res = sphere_solver(1, alpha, beta, phi_1=phi_1, phi_2=phi_2, sigma_cut=sigma_cut, to_dict=True)
#     # pprint(res["CA"])

#     assert np.allclose(res["CN"], np.array(
#         [0.67443545, 0.69983971, 0.75208198, 0.80618010, 0.86205881,
#         0.91963345, 0.97881012, 1.07035147, 1.22935000, 1.39459994,
#         1.56378953, 1.73437222, 1.90362198, 2.06869461, 2.22669282,
#         2.37473328, 2.51001327, 2.62987531, 2.73186861, 2.81380839,
#         2.87383762, 2.91050006]
#     ))
#     assert np.allclose(res["CA"], np.array(
#         [1.02257855, 1.04495071, 1.08896423, 1.13181624, 1.17328148,
#         1.21313493, 1.25115286, 1.30425509, 1.38050472, 1.43868365,
#         1.47590208, 1.48967893, 1.47803063, 1.43954806, 1.37346023,
#         1.27968415, 1.15886201, 1.01238840, 0.84243309, 0.65196663,
#         0.44479576, 0.22560736]
#     ))
#     assert np.allclose(res["CY"], np.zeros_like(res["CY"]))
#     assert np.allclose(res["L/D"], np.array(
#         [0.63478100, 0.62030639, 0.59211709, 0.56489407, 0.53858582,
#         0.51314592, 0.48853258, 0.45308139, 0.39765134, 0.34644903,
#         0.29918031, 0.25564437, 0.21571693, 0.17933381, 0.14647323,
#         0.11713483, 0.09131403, 0.06897014, 0.04998727, 0.03412782,
#         0.02098027, 0.00990650]
#     ))


# def test_phi1_120_phi2_240_beta_15_sigma_cut_40():
#     # NOTE: wrong CY values. Page 72
#     phi_1 = np.deg2rad(120)
#     phi_2 = np.deg2rad(240)
#     sigma_cut = np.deg2rad(40)
#     beta = np.deg2rad(15)
#     res = sphere_solver(1, alpha, beta, phi_1=phi_1, phi_2=phi_2, sigma_cut=sigma_cut, to_dict=True)
#     # pprint(res["CY"])

#     assert np.allclose(res["CN"], np.array(
#         [0.24168127, 0.24544482, 0.25261880, 0.25929310, 0.26543520,
#         0.27101517, 0.27600583, 0.28233448, 0.28963452, 0.29269347,
#         0.29141839, 0.28584802, 0.27615161, 0.26262379, 0.24567559,
#         0.22582197, 0.20366617, 0.17988139, 0.15519032, 0.13034318,
#         0.10609494, 0.08318237]
#     ))
#     assert np.allclose(res["CA"], np.array(
#         [0.62316810, 0.63095063, 0.64553635, 0.65875776, 0.67055043,
#         0.68085692, 0.68962700, 0.69981001, 0.70860520, 0.70697523,
#         0.69496963, 0.67295319, 0.64159487, 0.60184747, 0.55491870,
#         0.50223446, 0.44539554, 0.38612896, 0.32623550, 0.26753500,
#         0.21181105, 0.16075678]
#     ))
#     assert np.allclose(res["CY"], np.array(
#         [-0.02521701, -0.02539521, -0.02572834, -0.02603013, -0.02630020,
#         -0.02653823, -0.02674393, -0.02699132, -0.02723899, -0.02727935,
#         -0.02711210, -0.02673850, -0.02616142, -0.02538523, -0.02441584,
#         -0.02326063, -0.02192840, -0.02042927, -0.01877467, -0.01697718,
#         -0.01505049, -0.01300925]
#     ))


# def test_phi1_120_phi2_240_beta_15_sigma_cut_90():
#     # NOTE: wrong CY values. Page 72
#     phi_1 = np.deg2rad(120)
#     phi_2 = np.deg2rad(240)
#     sigma_cut = np.deg2rad(90)
#     beta = np.deg2rad(15)
#     res = sphere_solver(1, alpha, beta, phi_1=phi_1, phi_2=phi_2, sigma_cut=sigma_cut, to_dict=True)
#     # pprint(res["CY"])

#     assert np.allclose(res["CN"], np.array(
#         [0.66061109, 0.68454657, 0.73346512, 0.78363023, 0.83484212,
#         0.88688264, 0.93951968, 1.01906226, 1.15110855, 1.27907163,
#         1.39908128, 1.50749364, 1.60101467, 1.67680280, 1.73255523,
#         1.76657797, 1.77783723, 1.76599093, 1.73139899, 1.67511249,
#         1.59884165, 1.50490393]
#     ))
#     assert np.allclose(res["CA"], np.array(
#         [0.97363583, 0.99452905, 1.03562575, 1.07564093, 1.11438353,
#         1.15166737, 1.18731250, 1.23733238, 1.31018619, 1.36801907,
#         1.40907460, 1.43210540, 1.43641168, 1.42186260, 1.38890023,
#         1.33852611, 1.27227084, 1.19214754, 1.10059073, 1.00038230,
#         0.89456705, 0.78636012]
#     ))
#     assert np.allclose(res["CY"], np.array(
#         [-0.15225165, -0.15618835, -0.16402424, -0.17177534, -0.17940373,
#         -0.18687666, -0.19416657, -0.20470934, -0.22109326, -0.23582517,
#         -0.24876652, -0.25981466, -0.26888545, -0.27590987, -0.28083444,
#         -0.28362169, -0.28425042, -0.28271582, -0.27902959, -0.27321977,
#         -0.26533058, -0.25542207]
#     ))


# def test_phi1_120_phi2_240_beta_15_sigma_cut_180():
#     # NOTE: wrong results. Page 52, 63, 72
#     phi_1 = np.deg2rad(120)
#     phi_2 = np.deg2rad(240)
#     sigma_cut = np.deg2rad(180)
#     beta = np.deg2rad(15)
#     res = sphere_solver(1, alpha, beta, phi_1=phi_1, phi_2=phi_2, sigma_cut=sigma_cut, to_dict=True)
#     # pprint(res["CN"])
#     # pprint(res["CA"])
#     # pprint(res["CY"])

#     assert np.allclose(res["CN"], np.array(
#         [0.65626382, 0.67437125, 0.71213572, 0.75210965, 0.79444439,
#         0.83926262, 0.88665293, 0.96265890, 1.10229179, 1.25671834,
#         1.42284594, 1.59626861, 1.77179899, 1.94407644, 2.10812295,
#         2.25974185, 2.39570107, 2.51370131, 2.61218498, 2.69007058,
#         2.74651783, 2.78079539]
#     ))
#     assert np.allclose(res["CA"], np.array(
#         [0.94777187, 0.96817981, 1.00740073, 1.04437961, 1.07901144,
#         1.11122746, 1.14099119, 1.18102379, 1.23560195, 1.27539506,
#         1.30057983, 1.31057059, 1.30379753, 1.27782828, 1.22980169,
#         1.15706234, 1.05783519, 0.93177313, 0.78025507, 0.60636427,
#         0.41460731, 0.21046974]
#     ))
#     assert np.allclose(res["CY"], np.array(
#         [-0.05723028, -0.06176696, -0.07141069, -0.08178886, -0.09286595,
#         -0.10459871, -0.11693587, -0.13644508, -0.17107108, -0.20732470,
#         -0.24400171, -0.27996466, -0.31424119, -0.34608720, -0.37500739,
#         -0.40073317, -0.42316612, -0.44230087, -0.45814680, -0.47066753,
#         -0.47976036, -0.48528639]
#     ))


# ###############################################################################
# ################################# SPHERE CAPS #################################
# ############################# PHI_1=135, PHI_2=225 ############################
# ###############################################################################


# def test_phi1_135_phi2_225_beta_0_sigma_cut_40():
#     phi_1 = np.deg2rad(135)
#     phi_2 = np.deg2rad(225)
#     sigma_cut = np.deg2rad(40)
#     beta = np.deg2rad(0)
#     res = sphere_solver(1, alpha, beta, phi_1=phi_1, phi_2=phi_2, sigma_cut=sigma_cut, to_dict=True)

#     assert np.allclose(res["CN"], np.array(
#         [0.28059428, 0.28528386, 0.29426291, 0.30267227, 0.31047099,
#         0.31762106, 0.32408766, 0.33243808, 0.34254226, 0.34762661,
#         0.34753663, 0.34227506, 0.33200176, 0.31702890, 0.29781140,
#         0.27493319, 0.24908941, 0.22106530, 0.19171237, 0.16192249,
#         0.13260081, 0.10463826]
#     ))
#     assert np.allclose(res["CA"], np.array(
#         [0.66510488, 0.67424645, 0.69150794, 0.70733788, 0.72165913,
#         0.73440192, 0.74550418, 0.75896549, 0.77255120, 0.77474625,
#         0.76548395, 0.74504573, 0.71405259, 0.67344625, 0.62446050,
#         0.56858377, 0.50751382, 0.44310624, 0.37731803, 0.31214812,
#         0.24957667, 0.19150487]
#     ))
#     assert np.allclose(res["CY"], np.zeros_like(res["CY"]))
#     assert np.allclose(res["L/D"], np.array(
#         [0.40146830, 0.38254209, 0.34533521, 0.30890625, 0.27316128,
#         0.23801177, 0.20337385, 0.15220223, 0.06838477, -0.01456321,
#         -0.09772527, -0.18219750, -0.26914169, -0.35984482, -0.45579082,
#         -0.55875192, -0.67090980, -0.79502089, -0.93464578, -1.09447210,
#         -1.28077821, -1.50215064]
#     ))


# def test_phi1_135_phi2_225_beta_0_sigma_cut_90():
#     phi_1 = np.deg2rad(135)
#     phi_2 = np.deg2rad(225)
#     sigma_cut = np.deg2rad(90)
#     beta = np.deg2rad(0)
#     res = sphere_solver(1, alpha, beta, phi_1=phi_1, phi_2=phi_2, sigma_cut=sigma_cut, to_dict=True)

#     assert np.allclose(res["CN"], np.array(
#         [0.73598845, 0.76548105, 0.82615464, 0.88883196, 0.95320764,
#         1.01896806, 1.08579284, 1.18731248, 1.35717991, 1.52340900,
#         1.68094897, 1.82501306, 1.95122393, 2.05574675, 2.13540564,
#         2.18778020, 2.21127906, 2.20518822, 2.16969274, 2.10587114,
#         2.01566260, 1.90180807]
#     ))
#     assert np.allclose(res["CA"], np.array(
#         [1.02462233, 1.04910398, 1.09752615, 1.14503058, 1.19138586,
#         1.23636614, 1.27975227, 1.34138246, 1.43326577, 1.50922424,
#         1.56694991, 1.60468881, 1.62129426, 1.61626172, 1.58974410,
#         1.54254713, 1.47610485, 1.39243609, 1.29408307, 1.18403421,
#         1.06563328, 0.94247783]
#     ))
#     assert np.allclose(res["CY"], np.zeros_like(res["CY"]))
#     assert np.allclose(res["L/D"], np.array(
#         [0.69216869, 0.67746952, 0.64867169, 0.62052084, 0.59287660,
#         0.56563703, 0.53872826, 0.49887268, 0.43352894, 0.36927627,
#         0.30592570, 0.24332322, 0.18130570, 0.11968519, 0.05824533,
#         -0.00325805, -0.06509604, -0.12756734, -0.19100216, -0.25577133,
#         -0.32230426, -0.39112291]
#     ))


# def test_phi1_135_phi2_225_beta_0_sigma_cut_180():
#     # NOTE: wrong results on some values of CA, from the third decimal figure
#     # Hence, L/D is wrong with same order of error.
#     # Pages 62, 84
#     phi_1 = np.deg2rad(135)
#     phi_2 = np.deg2rad(225)
#     sigma_cut = np.deg2rad(180)
#     beta = np.deg2rad(0)
#     res = sphere_solver(1, alpha, beta, phi_1=phi_1, phi_2=phi_2, sigma_cut=sigma_cut, to_dict=True)
#     # pprint(res["CA"])

#     assert np.allclose(res["CN"], np.array(
#         [0.73599336, 0.76552036, 0.82646878, 0.88989050, 0.95571117,
#         1.02384375, 1.09418848, 1.20360436, 1.39525976, 1.59644893,
#         1.80438484, 2.01590599, 2.22754020, 2.43557886, 2.63616023,
#         2.82535998, 2.99928783, 3.15418960, 3.28655475, 3.39323018,
#         3.47154117, 3.51941924]
#     ))
#     assert np.allclose(res["CA"], np.array(
#         [1.02462231, 1.04910364, 1.09752066, 1.14500285, 1.19129835,
#         1.23615293, 1.27931129, 1.34031089, 1.42991342, 1.50114691,
#         1.55047013, 1.57474241, 1.57134551, 1.53829642, 1.47434891,
#         1.37908218, 1.25297542, 1.09746734, 0.91499921, 0.70903853,
#         0.48407782, 0.24560013]
#     ))
#     assert np.allclose(res["CY"], np.zeros_like(res["CY"]))
#     assert np.allclose(res["L/D"], np.array(
#         [0.69217338, 0.67750541, 0.64893468, 0.62133601, 0.59465624,
#         0.56884705, 0.54386459, 0.50785492, 0.45145939, 0.39920703,
#         0.35074809, 0.30581690, 0.26421500, 0.22579532, 0.19044609,
#         0.15807322, 0.12858008, 0.10184420, 0.07769087, 0.05586455,
#         0.03600007, 0.01759695]
#     ))


# def test_phi1_135_phi2_225_beta_15_sigma_cut_40():
#     # NOTE: wrong CY values. Page 74
#     phi_1 = np.deg2rad(135)
#     phi_2 = np.deg2rad(225)
#     sigma_cut = np.deg2rad(40)
#     beta = np.deg2rad(15)
#     res = sphere_solver(1, alpha, beta, phi_1=phi_1, phi_2=phi_2, sigma_cut=sigma_cut, to_dict=True)
#     # pprint(res["CY"])

#     assert np.allclose(res["CN"], np.array(
#         [0.26285488, 0.26723032, 0.27560788, 0.28345392, 0.29073023,
#         0.29740134, 0.30343476, 0.31122580, 0.32065313, 0.32539689,
#         0.32531294, 0.32040383, 0.31081871, 0.29684884, 0.27891867,
#         0.25757301, 0.23346043, 0.20731359, 0.17992693, 0.15213259,
#         0.12477509, 0.09868567]
#     ))
#     assert np.allclose(res["CA"], np.array(
#         [0.62262906, 0.63115825, 0.64726345, 0.66203298, 0.67539488,
#         0.68728407, 0.69764262, 0.71020219, 0.72287783, 0.72492584,
#         0.71628400, 0.69721488, 0.66829789, 0.63041166, 0.58470733,
#         0.53257363, 0.47559459, 0.41550150, 0.35412026, 0.29331591,
#         0.23493595, 0.18075423]
#     ))
#     assert np.allclose(res["CY"], np.array(
#         [-0.01564386, -0.01577441, -0.01602105, -0.01624816, -0.01645548,
#         -0.01664276, -0.01680975, -0.01702179, -0.01727128, -0.01738932,
#         -0.01737502, -0.01722849, -0.01695084, -0.01654418, -0.01601161,
#         -0.01535718, -0.01458587, -0.01370356, -0.01271695, -0.01163356,
#         -0.01046163, -0.00921009]
#     ))


# def test_phi1_135_phi2_225_beta_15_sigma_cut_90():
#     # NOTE: wrong CY values. Page 74
#     phi_1 = np.deg2rad(135)
#     phi_2 = np.deg2rad(225)
#     sigma_cut = np.deg2rad(90)
#     beta = np.deg2rad(15)
#     res = sphere_solver(1, alpha, beta, phi_1=phi_1, phi_2=phi_2, sigma_cut=sigma_cut, to_dict=True)
#     # pprint(res["CY"])

#     assert np.allclose(res["CN"], np.array(
#         [0.70968024, 0.73739355, 0.79426095, 0.85287571, 0.91300332,
#         0.97438444, 1.03674069, 1.13146121, 1.28994968, 1.44504353,
#         1.59203033, 1.72644395, 1.84420030, 1.94172142, 2.01604417,
#         2.06491030, 2.08683504, 2.08115220, 2.04803447, 1.98848811,
#         1.90432239, 1.79809467]
#     ))
#     assert np.allclose(res["CA"], np.array(
#         [0.96812582, 0.99097762, 1.03616823, 1.08049598, 1.12374821,
#         1.16571607, 1.20619604, 1.26369780, 1.34942610, 1.42029632,
#         1.47415510, 1.50936597, 1.52485907, 1.52016365, 1.49542237,
#         1.45138699, 1.38939550, 1.31133149, 1.21956687, 1.11688988,
#         1.00642031, 0.89151472]
#     ))
#     assert np.allclose(res["CY"], np.array(
#         [-0.09442360, -0.09733332, -0.10314403, -0.10890953, -0.11459453,
#         -0.12017040, -0.12561516, -0.13350276, -0.14582762, -0.15704264,
#         -0.16706247, -0.17581086, -0.18322122, -0.18923716, -0.19381288,
#         -0.19691358, -0.19851564, -0.19860688, -0.19718660, -0.19426561,
#         -0.18986614, -0.18402168]
#     ))


# def test_phi1_135_phi2_225_beta_15_sigma_cut_180():
#     # NOTE: wrong results. Page 55, 64, 74
#     phi_1 = np.deg2rad(135)
#     phi_2 = np.deg2rad(225)
#     sigma_cut = np.deg2rad(180)
#     beta = np.deg2rad(15)
#     res = sphere_solver(1, alpha, beta, phi_1=phi_1, phi_2=phi_2, sigma_cut=sigma_cut, to_dict=True)
#     # pprint(res["CN"])
#     # pprint(res["CA"])
#     # pprint(res["CY"])

#     assert np.allclose(res["CN"], np.array(
#         [0.70253422, 0.72227558, 0.76380282, 0.80827663, 0.85592411,
#         0.90693197, 0.96144170, 1.04995391, 1.21543531, 1.40178185,
#         1.60515709, 1.81992045, 2.03932810, 2.25633748, 2.46434510,
#         2.65771758, 2.83203921, 2.98407654, 3.11153446, 3.21272454,
#         3.28628016, 3.33102748]
#     ))
#     assert np.allclose(res["CA"], np.array(
#         [0.93373860, 0.95597988, 0.99874151, 1.03910248, 1.07697330,
#         1.11230711, 1.14509605, 1.18956915, 1.25161231, 1.29943926,
#         1.33357757, 1.35340048, 1.35683186, 1.34051418, 1.30039777,
#         1.23260214, 1.13433509, 1.00464536, 0.84483895, 0.65847941,
#         0.45100722, 0.22910632]
#     ))
#     assert np.allclose(res["CY"], np.array(
#         [0.03395964, 0.03056907, 0.02300003, 0.01445646, 0.00500559,
#         -0.00529257, -0.01637357, -0.03430197, -0.06696128, -0.10182135,
#         -0.13736082, -0.17214643, -0.20496669, -0.23492003, -0.26144801,
#         -0.28431367, -0.30353567, -0.31929599, -0.33184315, -0.34141117,
#         -0.34816932, -0.35220761]
#     ))


# ###############################################################################
# ################################# SPHERE CAPS #################################
# ############################# PHI_1=135, PHI_2=225 ############################
# ###############################################################################


# def test_phi1_150_phi2_210_beta_0_sigma_cut_40():
#     phi_1 = np.deg2rad(150)
#     phi_2 = np.deg2rad(210)
#     sigma_cut = np.deg2rad(40)
#     beta = np.deg2rad(0)
#     res = sphere_solver(1, alpha, beta, phi_1=phi_1, phi_2=phi_2, sigma_cut=sigma_cut, to_dict=True)

#     assert np.allclose(res["CN"], np.array(
#         [0.29788910, 0.30314183, 0.31323582, 0.32274050, 0.33160954,
#         0.33979975, 0.34727122, 0.35705215, 0.36929780, 0.37616461,
#         0.37744395, 0.37309693, 0.36325563, 0.34821910, 0.32844419,
#         0.30453176, 0.27720838, 0.24730426, 0.21572801, 0.18343906,
#         0.15141851, 0.12063927]
#     ))
#     assert np.allclose(res["CA"], np.array(
#         [0.66569366, 0.67543318, 0.69391521, 0.71099354, 0.72658495,
#         0.74061350, 0.75301083, 0.76841841, 0.78520512, 0.79046355,
#         0.78403395, 0.76611166, 0.73724124, 0.69829992, 0.65047090,
#         0.59520744, 0.53418869, 0.46926868, 0.40241998, 0.33567374,
#         0.27105801, 0.21053611]
#     ))
#     assert np.allclose(res["CY"], np.zeros_like(res["CY"]))
#     assert np.allclose(res["L/D"], np.array(
#         [0.42669878, 0.40750348, 0.36980385, 0.33294012, 0.29681552,
#         0.26133908, 0.22642480, 0.17492971, 0.09080560, 0.00783272,
#         -0.07507178, -0.15899073, -0.24505877, -0.33451931, -0.42879239,
#         -0.52956015, -0.63887990, -0.75933851, -0.89426885, -1.04806019,
#         -1.22661882, -1.43810789]
#     ))


# def test_phi1_150_phi2_210_beta_0_sigma_cut_90():
#     phi_1 = np.deg2rad(150)
#     phi_2 = np.deg2rad(210)
#     sigma_cut = np.deg2rad(90)
#     beta = np.deg2rad(0)
#     res = sphere_solver(1, alpha, beta, phi_1=phi_1, phi_2=phi_2, sigma_cut=sigma_cut, to_dict=True)

#     assert np.allclose(res["CN"], np.array(
#         [0.78228034, 0.81532090, 0.88352074, 0.95426727, 1.02721582,
#         1.10201098, 1.17828836, 1.29466916, 1.49071768, 1.68419968,
#         1.86923632, 2.04020536, 2.19191199, 2.31974667, 2.41982522,
#         2.48910680, 2.52548632, 2.52785842, 2.49615101, 2.43132751,
#         2.33535754, 2.21115712]
#     ))
#     assert np.allclose(res["CA"], np.array(
#         [1.02614827, 1.05221200, 1.10395890, 1.15498862, 1.20505252,
#         1.25390671, 1.30131318, 1.36920538, 1.47197174, 1.55908330,
#         1.62789322, 1.67631074, 1.70286472, 1.70674834, 1.68784358,
#         1.64672486, 1.58464156, 1.50348003, 1.40570635, 1.29429130,
#         1.17262017, 1.04438989]
#     ))
#     assert np.allclose(res["CY"], np.zeros_like(res["CY"]))
#     assert np.allclose(res["L/D"], np.array(
#         [0.73510928, 0.72044845, 0.69168420, 0.66349261, 0.63572336,
#         0.60827277, 0.58107063, 0.54063620, 0.47403363, 0.40827993,
#         0.34330932, 0.27905765, 0.21542007, 0.15224118, 0.08931764,
#         0.02640372, -0.03678412, -0.10056552, -0.16529821, -0.23138537,
#         -0.29929075, -0.36956693]
#     ))


# def test_phi1_150_phi2_210_beta_0_sigma_cut_180():
#     # NOTE: wrong results on some values of CN, from the fourth decimal figure
#     # Hence, L/D is wrong with same order of error.
#     # Pages 65, 84
#     phi_1 = np.deg2rad(150)
#     phi_2 = np.deg2rad(210)
#     sigma_cut = np.deg2rad(180)
#     beta = np.deg2rad(0)
#     res = sphere_solver(1, alpha, beta, phi_1=phi_1, phi_2=phi_2, sigma_cut=sigma_cut, to_dict=True)
#     # pprint(res["CN"])
#     # pprint(res["CA"])

#     assert np.allclose(res["CN"], np.array(
#         [0.78228630, 0.81536853, 0.88390140, 0.95554983, 1.03024875,
#         1.10791663, 1.18845532, 1.31439041, 1.53677310, 1.77243825,
#         2.01815234, 2.27012743, 2.52409457, 2.77539706, 3.01910204,
#         3.25012879, 3.46339162, 3.65395491, 3.81719723, 3.94898102,
#         4.04582296, 4.10505943]
#     ))
#     assert np.allclose(res["CA"], np.array(
#         [1.02614825, 1.05221158, 1.10395226, 1.15495502, 1.20494654,
#         1.25364859, 1.30077954, 1.36790970, 1.46792539, 1.54935597,
#         1.60810277, 1.64046905, 1.64331727, 1.61421772, 1.55158409,
#         1.45479107, 1.32426955, 1.16157463, 0.96942197, 0.75168769,
#         0.51336783, 0.26049353]
#     ))
#     assert np.allclose(res["CY"], np.zeros_like(res["CY"]))
#     assert np.allclose(res["L/D"], np.array(
#         [0.73511496, 0.72049171, 0.69199928, 0.66446357, 0.63783060,
#         0.61205107, 0.58707989, 0.55104957, 0.49450463, 0.44192957,
#         0.39293269, 0.34719765, 0.30446721, 0.26452876, 0.22720093,
#         0.19232023, 0.15972731, 0.12925249, 0.10070033, 0.07383359,
#         0.04835670, 0.02389928]
#     ))


# def test_phi1_150_phi2_210_beta_15_sigma_cut_40():
#     # NOTE: wrong CY values. Page 76
#     phi_1 = np.deg2rad(150)
#     phi_2 = np.deg2rad(210)
#     sigma_cut = np.deg2rad(40)
#     beta = np.deg2rad(15)
#     res = sphere_solver(1, alpha, beta, phi_1=phi_1, phi_2=phi_2, sigma_cut=sigma_cut, to_dict=True)
#     # pprint(res["CY"])

#     assert np.allclose(res["CN"], np.array(
#         [0.27849479, 0.28339566, 0.29281348, 0.30168146, 0.30995639,
#         0.31759796, 0.32456894, 0.33369468, 0.34512002, 0.35152684,
#         0.35272048, 0.34866465, 0.33948260, 0.32545332, 0.30700308,
#         0.28469248, 0.25919942, 0.23129849, 0.20183745, 0.17171146,
#         0.14183587, 0.11311845]
#     ))
#     assert np.allclose(res["CA"], np.array(
#         [0.62208987, 0.63117696, 0.64842093, 0.66435523, 0.67890221,
#         0.69199103, 0.70355789, 0.71793337, 0.73359557, 0.73850176,
#         0.73250286, 0.71578113, 0.68884467, 0.65251192, 0.60788683,
#         0.55632532, 0.49939406, 0.43882287, 0.37645218, 0.31417708,
#         0.25388979, 0.19742209]
#     ))
#     assert np.allclose(res["CY"], np.array(
#         [-0.00745557, -0.00752518, -0.00765752, -0.00778052, -0.00789405,
#         -0.00799796, -0.00809212, -0.00821485, -0.00836922, -0.00845990,
#         -0.00848619, -0.00844790, -0.00834532, -0.00817922, -0.00795087,
#         -0.00766201, -0.00731484, -0.00691200, -0.00645655, -0.00595197,
#         -0.00540209, -0.00481109]
#     ))


# def test_phi1_150_phi2_210_beta_15_sigma_cut_90():
#     # NOTE: wrong CY values. Page 76
#     phi_1 = np.deg2rad(150)
#     phi_2 = np.deg2rad(210)
#     sigma_cut = np.deg2rad(90)
#     beta = np.deg2rad(15)
#     res = sphere_solver(1, alpha, beta, phi_1=phi_1, phi_2=phi_2, sigma_cut=sigma_cut, to_dict=True)
#     # pprint(res["CY"])

#     assert np.allclose(res["CN"], np.array(
#         [0.74222338, 0.77314412, 0.83686748, 0.90290032, 0.97096550,
#         1.04075036, 1.11191813, 1.22050289, 1.40341865, 1.58393981,
#         1.75658135, 1.91609764, 2.05764184, 2.17691323, 2.27028779,
#         2.33492838, 2.36887094, 2.37108413, 2.34150071, 2.28101956,
#         2.19147837, 2.07559780]
#     ))
#     assert np.allclose(res["CA"], np.array(
#         [0.96319837, 0.98751900, 1.03580183, 1.08341364, 1.13012393,
#         1.17570551, 1.21993635, 1.28328063, 1.37916295, 1.46043915,
#         1.52463968, 1.56981384, 1.59458904, 1.59821250, 1.58057412,
#         1.54220984, 1.48428532, 1.40856059, 1.31733650, 1.21338484,
#         1.09986414, 0.98022366]
#     ))
#     assert np.allclose(res["CY"], np.array(
#         [-0.04497950, -0.04655452, -0.04970054, -0.05281603, -0.05587824,
#         -0.05887409, -0.06179823, -0.06604218, -0.07270766, -0.07881978,
#         -0.08433204, -0.08920248, -0.09339404, -0.09687481, -0.09961830,
#         -0.10160364, -0.10281571, -0.10324530, -0.10288912, -0.10174990,
#         -0.09983630, -0.09716288]
#     ))

# def test_phi1_150_phi2_210_beta_15_sigma_cut_180():
#     # NOTE: wrong results. Page 57, 67, 76
#     phi_1 = np.deg2rad(150)
#     phi_2 = np.deg2rad(210)
#     sigma_cut = np.deg2rad(180)
#     beta = np.deg2rad(15)
#     res = sphere_solver(1, alpha, beta, phi_1=phi_1, phi_2=phi_2, sigma_cut=sigma_cut, to_dict=True)
#     # pprint(res["CN"])
#     # pprint(res["CA"])
#     # pprint(res["CY"])

#     assert np.allclose(res["CN"], np.array(
#         [0.73024240, 0.74889896, 0.78876125, 0.83247221, 0.88045152,
#         0.93302828, 0.99046097, 1.08608933, 1.27114534, 1.48668598,
#         1.72787432, 1.98717305, 2.25537288, 2.52277960, 2.78030487,
#         3.02025198, 3.23668150, 3.42535917, 3.58339429, 3.70874865,
#         3.79981067, 3.85518922]
#     ))
#     assert np.allclose(res["CA"], np.array(
#         [0.91145560, 0.93495397, 0.97975407, 1.02156585, 1.06037026,
#         1.09620484, 1.12915943, 1.17348827, 1.23521797, 1.28416973,
#         1.32223818, 1.34939199, 1.36320728, 1.35910088, 1.33120072,
#         1.27362823, 1.18186845, 1.05389024, 0.89075435, 0.69658903,
#         0.47798092, 0.24298004]
#     ))
#     assert np.allclose(res["CY"], np.array(
#         [0.14733775, 0.14575007, 0.14113354, 0.13490443, 0.12731220,
#         0.11851913, 0.10864623, 0.09206595, 0.06070636, 0.02645436,
#         -0.00859684, -0.04250533, -0.07368176, -0.10102250, -0.12395904,
#         -0.14242338, -0.15674380, -0.16749655, -0.17534543, -0.18090071,
#         -0.18462283, -0.18678561]
#     ))
